---
Parameters:
  EnvironmentName:
    Type: String
    Description: Environment name that joins all the stacks

  SideCarRouterManagerImage:
    Type: String
    Description: Sidecar router manager that sets up networking for transparent proxy
    Default: "111345817488.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-proxy-route-manager"

  EnvoyImage:
    Type: String
    Description: Envoy image to use

  XRayImageUrl:
    Type: String
    Default: amazon/aws-xray-daemon
    Description: The url of a docker image that contains the X-Ray daemon that will handle the traffic for this service

  AppMeshXdsEndpoint:
    Type: String
    Description: AWS App Mesh XDS endpoint (optional)
    Default: ""

  RedisImage:
    Type: String
    Description: Redis image to use
    Default: redis

  EnvoyLogLevel:
    Type: String
    Default: trace

  ColorTellerImage:
    Type: String
    Description: Color Teller app image
    Default: "733656427674.dkr.ecr.us-west-2.amazonaws.com/color/teller"

  ColorGatewayImage:
    Type: String
    Description: Color Gateway app image
    Default: "733656427674.dkr.ecr.us-west-2.amazonaws.com/color/gateway"

  ColorTellerNodeId:
    Type: String
    Description: VirtualNode id of Color Teller that will be used for resolving colorteller's default service-name.

  ColorTellerBlackNodeId:
    Type: String
    Description: VirtualNode id of Color Teller that returns black

  ColorTellerBlueNodeId:
    Type: String
    Description: VirtualNode id of Color Teller that returns blue

  ColorTellerRedNodeId:
    Type: String
    Description: VirtualNode id of Color Teller that returns red

  ColorGatewayNodeId:
    Type: String
    Description: VirtualNode id of Color Gateway

  RedisNodeId:
    Type: String
    Description: VirtualNode id for Redis

  RedisPingerNodeId:
    Type: String
    Description: VirtualNode id for RedisPinger

  AppMeshEgressIgnoredIpCsv:
    Type: String
    Default: 169.254.170.2,169.254.169.254

  ECSServicesDomain:
    Type: String
    Description: DNS namespace used by services e.g. default.svc.cluster.local

Resources:

  ### colorteller.default.svc.cluster.local
  ColorTellerServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "colorteller"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ColorTellerService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: EC2
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': ColorTellerServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets: 
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet2"
      TaskDefinition: { Ref: ColorTellerTaskDefinition }

  ColorTellerTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: "app"
          Image: { Ref: ColorTellerImage }
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-app"
          PortMappings:
            - ContainerPort: 9080
              HostPort: 9080
              Protocol: "tcp"
          Environment:
            - Name: "SERVER_PORT"
              Value: "9080"
            - Name: "COLOR"
              Value: "white"
        - Name: xray-daemon
          Essential: false
          Image: !Ref 'XRayImageUrl'
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'xray'
        - Name: envoy
          Image: { Ref: EnvoyImage }
          Essential: true
          User: "1337"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup" 
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-envoy"
          Environment:
            - Name: "APPMESH_VIRTUAL_NODE_NAME"
              Value: "colorteller-vn"
            - Name: "APPMESH_VIRTUAL_NODE_UID"
              Value: { Ref: ColorTellerNodeId }
            - Name: "APPMESH_XDS_ENDPOINT"
              Value: !Ref AppMeshXdsEndpoint
            - Name: "STATSD_ENDPOINT"
              Value: !Sub "statsd.${ECSServicesDomain}"
            - Name: "ENVOY_LOG_LEVEL"
              Value: { Ref: EnvoyLogLevel }
            - Name: "AWS_REGION"
              Value: "us-west-2"
        - Name: "proxyinit"
          Image: { Ref: SideCarRouterManagerImage }
          Essential: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-proxyinit"
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "APPMESH_START_ENABLED"
              Value: "1"
            - Name: "APPMESH_USE_TPROXY"
              Value: "0"
            - Name: "APPMESH_IGNORE_UID"
              Value: "1337"
            - Name: "APPMESH_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "APPMESH_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "APPMESH_APP_PORTS"
              Value: "9080"
            - Name: "APPMESH_EGRESS_IGNORED_IP"
              Value: { Ref: AppMeshEgressIgnoredIpCsv }
      ExecutionRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskExecutionIamRoleArn"
      TaskRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskIamRoleArn"
      NetworkMode: "awsvpc"
      Memory: 256

  ### colorteller-blue.default.svc.cluster.local
  ColorTellerBlueServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "colorteller-blue"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ColorTellerBlueService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: EC2
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': ColorTellerBlueServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets: 
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet2"
      TaskDefinition: { Ref: ColorTellerBlueTaskDefinition }

  ColorTellerBlueTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: "app"
          Image: { Ref: ColorTellerImage }
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-blue-app"
          PortMappings:
            - ContainerPort: 9080
              HostPort: 9080
              Protocol: "tcp"
          Environment:
            - Name: "SERVER_PORT"
              Value: "9080"
            - Name: "COLOR"
              Value: "blue"
        - Name: xray-daemon
          Essential: false
          Image: !Ref 'XRayImageUrl'
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'xray'
        - Name: envoy
          Image: { Ref: EnvoyImage }
          Essential: true
          User: "1337"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-blue-envoy"
          Environment:
            - Name: "APPMESH_VIRTUAL_NODE_NAME"
              Value: "colorteller-blue-vn"
            - Name: "APPMESH_VIRTUAL_NODE_UID"
              Value: { Ref: ColorTellerBlueNodeId }
            - Name: "APPMESH_XDS_ENDPOINT"
              Value: !Ref AppMeshXdsEndpoint
            - Name: "STATSD_ENDPOINT"
              Value: !Sub "statsd.${ECSServicesDomain}"
            - Name: "ENVOY_LOG_LEVEL"
              Value: { Ref: EnvoyLogLevel }
            - Name: "AWS_REGION"
              Value: "us-west-2"
        - Name: "proxyinit"
          Image: { Ref: SideCarRouterManagerImage }
          Essential: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-blue-proxyinit"
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "APPMESH_START_ENABLED"
              Value: "1"
            - Name: "APPMESH_USE_TPROXY"
              Value: "0"
            - Name: "APPMESH_IGNORE_UID"
              Value: "1337"
            - Name: "APPMESH_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "APPMESH_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "APPMESH_APP_PORTS"
              Value: "9080"
            - Name: "APPMESH_EGRESS_IGNORED_IP"
              Value: { Ref: AppMeshEgressIgnoredIpCsv }
      ExecutionRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskExecutionIamRoleArn"
      TaskRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskIamRoleArn"
      NetworkMode: "awsvpc"
      Memory: 256

  ### colorteller-red.default.svc.cluster.local
  ColorTellerRedServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "colorteller-red"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ColorTellerRedService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: EC2
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': ColorTellerRedServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets: 
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet2"
      TaskDefinition: { Ref: ColorTellerRedTaskDefinition }

  ColorTellerRedTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: "app"
          Image: { Ref: ColorTellerImage }
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-red-app"
          PortMappings:
            - ContainerPort: 9080
              HostPort: 9080
              Protocol: "tcp"
          Environment:
            - Name: "SERVER_PORT"
              Value: "9080"
            - Name: "COLOR"
              Value: "red"
        - Name: xray-daemon
          Essential: false
          Image: !Ref 'XRayImageUrl'
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'xray'
        - Name: envoy
          Image: { Ref: EnvoyImage }
          Essential: true
          User: "1337"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-red-envoy"
          Environment:
            - Name: "APPMESH_VIRTUAL_NODE_NAME"
              Value: "colorteller-red-vn"
            - Name: "APPMESH_VIRTUAL_NODE_UID"
              Value: { Ref: ColorTellerRedNodeId }
            - Name: "APPMESH_XDS_ENDPOINT"
              Value: !Ref AppMeshXdsEndpoint
            - Name: "STATSD_ENDPOINT"
              Value: !Sub "statsd.${ECSServicesDomain}"
            - Name: "ENVOY_LOG_LEVEL"
              Value: { Ref: EnvoyLogLevel }
            - Name: "AWS_REGION"
              Value: "us-west-2"
        - Name: "proxyinit"
          Image: { Ref: SideCarRouterManagerImage }
          Essential: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-red-proxyinit"
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "APPMESH_START_ENABLED"
              Value: "1"
            - Name: "APPMESH_USE_TPROXY"
              Value: "0"
            - Name: "APPMESH_IGNORE_UID"
              Value: "1337"
            - Name: "APPMESH_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "APPMESH_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "APPMESH_APP_PORTS"
              Value: "9080"
            - Name: "APPMESH_EGRESS_IGNORED_IP"
              Value: { Ref: AppMeshEgressIgnoredIpCsv }
      ExecutionRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskExecutionIamRoleArn"
      TaskRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskIamRoleArn"
      NetworkMode: "awsvpc"
      Memory: 256

  ### colorteller-black.default.svc.cluster.local
  ColorTellerBlackServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "colorteller-black"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ColorTellerBlackService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: EC2
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': ColorTellerBlackServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets: 
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet2"
      TaskDefinition: { Ref: ColorTellerBlackTaskDefinition }

  ColorTellerBlackTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: "app"
          Image: { Ref: ColorTellerImage }
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-black-app"
          PortMappings:
            - ContainerPort: 9080
              HostPort: 9080
              Protocol: "tcp"
          Environment:
            - Name: "SERVER_PORT"
              Value: "9080"
            - Name: "COLOR"
              Value: "black"
        - Name: xray-daemon
          Essential: false
          Image: !Ref 'XRayImageUrl'
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'xray'
        - Name: envoy
          Image: { Ref: EnvoyImage }
          Essential: true
          User: "1337"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-black-envoy"
          Environment:
            - Name: "APPMESH_VIRTUAL_NODE_NAME"
              Value: "colorteller-black-vn"
            - Name: "APPMESH_VIRTUAL_NODE_UID"
              Value: { Ref: ColorTellerBlackNodeId }
            - Name: "APPMESH_XDS_ENDPOINT"
              Value: !Ref AppMeshXdsEndpoint
            - Name: "STATSD_ENDPOINT"
              Value: !Sub "statsd.${ECSServicesDomain}"
            - Name: "ENVOY_LOG_LEVEL"
              Value: { Ref: EnvoyLogLevel }
            - Name: "AWS_REGION"
              Value: "us-west-2"
        - Name: "proxyinit"
          Image: { Ref: SideCarRouterManagerImage }
          Essential: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorteller-black-proxyinit"
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "APPMESH_START_ENABLED"
              Value: "1"
            - Name: "APPMESH_USE_TPROXY"
              Value: "0"
            - Name: "APPMESH_IGNORE_UID"
              Value: "1337"
            - Name: "APPMESH_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "APPMESH_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "APPMESH_APP_PORTS"
              Value: "9080"
            - Name: "APPMESH_EGRESS_IGNORED_IP"
              Value: { Ref: AppMeshEgressIgnoredIpCsv }
      ExecutionRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskExecutionIamRoleArn"
      TaskRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskIamRoleArn"
      NetworkMode: "awsvpc"
      Memory: 256

  ### colorgateway.default.svc.cluster.local
  ColorGatewayServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "colorgateway"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ColorGatewayService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: EC2
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': ColorGatewayServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets: 
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet2"
      TaskDefinition: { Ref: ColorGatewayTaskDefinition }

  ColorGatewayTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: "app"
          Image: { Ref: ColorGatewayImage }
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorgateway-app"
          PortMappings:
            - ContainerPort: 9080
              HostPort: 9080
              Protocol: "tcp"
          Environment:
            - Name: "SERVER_PORT"
              Value: "9080"
            - Name: "COLOR_TELLER_ENDPOINT"
              Value: !Sub "colorteller.${ECSServicesDomain}:9080"
            - Name: "REDIS_ENDPOINT"
              Value: !Sub "redis.${ECSServicesDomain}:6379"
        - Name: xray-daemon
          Essential: false
          Image: !Ref 'XRayImageUrl'
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'xray'
        - Name: envoy
          Image: { Ref: EnvoyImage }
          Essential: true
          User: "1337"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorgateway-envoy"
          Environment:
            - Name: "APPMESH_VIRTUAL_NODE_NAME"
              Value: "colorgateway-vn"
            - Name: "APPMESH_VIRTUAL_NODE_UID"
              Value: { Ref: ColorGatewayNodeId }
            - Name: "APPMESH_XDS_ENDPOINT"
              Value: !Ref AppMeshXdsEndpoint
            - Name: "STATSD_ENDPOINT"
              Value: !Sub "statsd.${ECSServicesDomain}"
            - Name: "ENVOY_LOG_LEVEL"
              Value: { Ref: EnvoyLogLevel }
            - Name: "AWS_REGION"
              Value: "us-west-2"
        - Name: "proxyinit"
          Image: { Ref: SideCarRouterManagerImage }
          Essential: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "colorgateway-proxyinit"
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "APPMESH_START_ENABLED"
              Value: "1"
            - Name: "APPMESH_USE_TPROXY"
              Value: "0"
            - Name: "APPMESH_IGNORE_UID"
              Value: "1337"
            - Name: "APPMESH_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "APPMESH_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "APPMESH_APP_PORTS"
              Value: "9080"
            - Name: "APPMESH_EGRESS_IGNORED_IP"
              Value: { Ref: AppMeshEgressIgnoredIpCsv }
      ExecutionRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskExecutionIamRoleArn"
      TaskRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskIamRoleArn"
      NetworkMode: "awsvpc"
      Memory: 256

  ### redis.default.svc.cluster.local
  RedisServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "redis"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  RedisService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: EC2
      ServiceRegistries:
        - RegistryArn:
            'Fn::GetAtt': RedisServiceDiscoveryRecord.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets: 
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet2"
      TaskDefinition: { Ref: RedisTaskDefinition }

  RedisTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: "app"
          Image: { Ref: RedisImage }
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "redis-app"
          PortMappings:
            - ContainerPort: 6379
              HostPort: 6379
              Protocol: "tcp"
        - Name: xray-daemon
          Essential: false
          Image: !Ref 'XRayImageUrl'
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'xray'
        - Name: envoy
          Image: { Ref: EnvoyImage }
          Essential: true
          User: "1337"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "redis-envoy"
          Environment:
            - Name: "APPMESH_VIRTUAL_NODE_NAME"
              Value: "redis-vn"
            - Name: "APPMESH_VIRTUAL_NODE_UID"
              Value: { Ref: RedisNodeId }
            - Name: "APPMESH_XDS_ENDPOINT"
              Value: !Ref AppMeshXdsEndpoint
            - Name: "STATSD_ENDPOINT"
              Value: !Sub "statsd.${ECSServicesDomain}"
            - Name: "ENVOY_LOG_LEVEL"
              Value: { Ref: EnvoyLogLevel }
            - Name: "AWS_REGION"
              Value: "us-west-2"
        - Name: "proxyinit"
          Image: { Ref: SideCarRouterManagerImage }
          Essential: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "redis-proxyinit"
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "APPMESH_START_ENABLED"
              Value: "1"
            - Name: "APPMESH_USE_TPROXY"
              Value: "0"
            - Name: "APPMESH_IGNORE_UID"
              Value: "1337"
            - Name: "APPMESH_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "APPMESH_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "APPMESH_APP_PORTS"
              Value: "6379"
            - Name: "APPMESH_EGRESS_IGNORED_IP"
              Value: { Ref: AppMeshEgressIgnoredIpCsv }
      ExecutionRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskExecutionIamRoleArn"
      TaskRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskIamRoleArn"
      NetworkMode: "awsvpc"
      Memory: 256

  #redispinger standalone
  RedisPingerService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub "${EnvironmentName}:ECSCluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceSecurityGroup"
          Subnets:
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet1"
            - 'Fn::ImportValue': !Sub "${EnvironmentName}:PrivateSubnet2"
      TaskDefinition: { Ref: RedisPingerTaskDefinition }

  RedisPingerTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: "redispinger"
          Image: "733656427674.dkr.ecr.us-west-2.amazonaws.com/redispinger"
          Essential: true
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "redispinger"
          Environment:
            - Name: "REDIS_ENDPOINT"
              Value: !Sub "redis.${ECSServicesDomain}:6379"
        - Name: xray-daemon
          Essential: false
          Cpu: 32
          Memory: 64
          Image: !Ref 'XRayImageUrl'
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'xray'
        - Name: envoy
          Image: { Ref: EnvoyImage }
          Essential: true
          User: "1337"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "redis-envoy"
          Environment:
            - Name: "APPMESH_VIRTUAL_NODE_NAME"
              Value: "redispinger-vn"
            - Name: "APPMESH_VIRTUAL_NODE_UID"
              Value: { Ref: RedisPingerNodeId }
            - Name: "APPMESH_XDS_ENDPOINT"
              Value: !Ref AppMeshXdsEndpoint
            - Name: "STATSD_ENDPOINT"
              Value: !Sub "statsd.${ECSServicesDomain}"
            - Name: "ENVOY_LOG_LEVEL"
              Value: { Ref: EnvoyLogLevel }
            - Name: "AWS_REGION"
              Value: "us-west-2"
        - Name: "proxyinit"
          Image: { Ref: SideCarRouterManagerImage }
          Essential: false
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group:
                'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceLogGroup"
              awslogs-region: { Ref: "AWS::Region" }
              awslogs-stream-prefix: "redis-proxyinit"
          LinuxParameters:
            Capabilities:
              Add:
                - "NET_ADMIN"
          Environment:
            - Name: "APPMESH_START_ENABLED"
              Value: "1"
            - Name: "APPMESH_USE_TPROXY"
              Value: "0"
            - Name: "APPMESH_IGNORE_UID"
              Value: "1337"
            - Name: "APPMESH_ENVOY_INGRESS_PORT"
              Value: "15000"
            - Name: "APPMESH_ENVOY_EGRESS_PORT"
              Value: "15001"
            - Name: "APPMESH_APP_PORTS"
              Value: "35678"
            - Name: "APPMESH_EGRESS_IGNORED_IP"
              Value: { Ref: AppMeshEgressIgnoredIpCsv }
      ExecutionRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskExecutionIamRoleArn"
      TaskRoleArn:
        'Fn::ImportValue': !Sub "${EnvironmentName}:TaskIamRoleArn"
      NetworkMode: "awsvpc"
      Memory: 256
