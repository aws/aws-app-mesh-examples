Parameters:
  AppMeshMeshName:
    Type: String
    Description: Mesh name

  ProjectName:
    Type: String
    Description: Project name to link stacks

Resources:
  ColorClientNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualNodeName: color_client
      Spec:
        Backends:
        - VirtualService:
            VirtualServiceName: 'color-server-red.default.svc.cluster.local'
        - VirtualService:
            VirtualServiceName: 'color-server-orange.default.svc.cluster.local'
        - VirtualService:
            VirtualServiceName: 'color-server-yellow.default.svc.cluster.local'                
        - VirtualService:
            VirtualServiceName: 'color-server-green.default.svc.cluster.local'
        - VirtualService:
            VirtualServiceName: 'color-server-blue.default.svc.cluster.local'              
        - VirtualService:
            VirtualServiceName: 'color-server-purple.default.svc.cluster.local'                       
        Listeners:
        - PortMapping:
            Port: 8080
            Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: 'default.svc.cluster.local'
            ServiceName: color_client

  ColorServerBlueNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualNodeName: color_server-blue
      Spec:
        Listeners:
        - PortMapping:
            Port: 8080
            Protocol: http2
          HealthCheck:
            HealthyThreshold: 2
            IntervalMillis: 5000
            TimeoutMillis: 2000
            UnhealthyThreshold: 3
            Port: 8080
            Path: /ping
            Protocol: http2
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: 'default.svc.cluster.local'
            ServiceName: color-server-blue
            Attributes:
            - Key: ECS_TASK_DEFINITION_FAMILY
              Value: blue

  ColorServerGreenNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualNodeName: color_server-green
      Spec:
        Listeners:
        - PortMapping:
            Port: 8080
            Protocol: http2
          HealthCheck:
            HealthyThreshold: 2
            IntervalMillis: 5000
            TimeoutMillis: 2000
            UnhealthyThreshold: 3
            Port: 8080
            Path: /ping
            Protocol: http2
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: 'default.svc.cluster.local'
            ServiceName: color-server-green
            Attributes:
            - Key: ECS_TASK_DEFINITION_FAMILY
              Value: green

  ColorServerPurpleNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualNodeName: color_server-purple
      Spec:
        Listeners:
        - PortMapping:
            Port: 8080
            Protocol: http2
          HealthCheck:
            HealthyThreshold: 2
            IntervalMillis: 5000
            TimeoutMillis: 2000
            UnhealthyThreshold: 3
            Port: 8080
            Path: /ping
            Protocol: http2
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: 'default.svc.cluster.local'
            ServiceName: color-server-purple
            Attributes:
            - Key: ECS_TASK_DEFINITION_FAMILY
              Value: purple

  ColorServerRedNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualNodeName: color_server-red
      Spec:
        Listeners:
        - PortMapping:
            Port: 8080
            Protocol: http2
          HealthCheck:
            HealthyThreshold: 2
            IntervalMillis: 5000
            TimeoutMillis: 2000
            UnhealthyThreshold: 3
            Port: 8080
            Path: /ping
            Protocol: http2
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: 'default.svc.cluster.local'
            ServiceName: color-server-red
            Attributes:
            - Key: ECS_TASK_DEFINITION_FAMILY
              Value: red

  ColorServerOrangeNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualNodeName: color_server-orange
      Spec:
        Listeners:
        - PortMapping:
            Port: 8080
            Protocol: http2
          HealthCheck:
            HealthyThreshold: 2
            IntervalMillis: 5000
            TimeoutMillis: 2000
            UnhealthyThreshold: 3
            Port: 8080
            Path: /ping
            Protocol: http2
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: 'default.svc.cluster.local'
            ServiceName: color-server-orange
            Attributes:
            - Key: ECS_TASK_DEFINITION_FAMILY
              Value: orange

  ColorServerYellowNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualNodeName: color_server-yellow
      Spec:
        Listeners:
        - PortMapping:
            Port: 8080
            Protocol: http2
          HealthCheck:
            HealthyThreshold: 2
            IntervalMillis: 5000
            TimeoutMillis: 2000
            UnhealthyThreshold: 3
            Port: 8080
            Path: /ping
            Protocol: http2
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: 'default.svc.cluster.local'
            ServiceName: color-server-yellow
            Attributes:
            - Key: ECS_TASK_DEFINITION_FAMILY
              Value: yellow

  VirtualServiceRed:
    DependsOn:
     - ColorServerRedNode
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualServiceName: 'color-server-red.default.svc.cluster.local'
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: color_server-red

  VirtualServiceOrange:
    DependsOn:
     - ColorServerOrangeNode
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualServiceName: 'color-server-orange.default.svc.cluster.local'
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: color_server-orange            

  VirtualServiceYellow:
    DependsOn:
     - ColorServerYellowNode
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualServiceName: 'color-server-yellow.default.svc.cluster.local'
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: color_server-yellow

  VirtualServiceGreen:
    DependsOn:
     - ColorServerGreenNode
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualServiceName: 'color-server-green.default.svc.cluster.local'
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: color_server-green

  VirtualServiceBlue:
    DependsOn:
     - ColorServerBlueNode
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualServiceName: 'color-server-blue.default.svc.cluster.local'
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: color_server-blue    

  VirtualServicePurple:
    DependsOn:
     - ColorServerPurpleNode
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: !Sub ${AppMeshMeshName}
      VirtualServiceName: 'color-server-purple.default.svc.cluster.local'
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: color_server-purple