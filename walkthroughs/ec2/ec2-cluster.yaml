Description: >
  This template deploys an EC2 instance to the provided VPC and subnets

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  InstanceType:
    Description: Which instance type should we use to build the EC2 cluster?
    Type: String
    Default: c4.large

  EC2AMI:
    Description: The Amazon Machine Image ID used for the cluster, leave it as the default value to get the latest AMI
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of an existing EC2 KeyPair that will be used to access the underlying hosts in the cluster. If none appear here you need to create and download an SSH key.

  ProxyRouterManagerImage:
    Type: String
    Description: Sidecar router manager that sets up networking for transparent proxy
    Default: "subfuzion/aws-appmesh-proxy-route-manager:latest"

  EnvoyImage:
    Type: String
    Description: Envoy image to use

  AppMeshXdsEndpoint:
    Type: String
    Description: App Mesh XDS Endpoint Override
    Default: ""

  EnvoyLogLevel:
    Type: String
    Default: debug

  ColorTellerImage:
    Type: String
    Description: Color Teller app image
    
  AppMeshMeshName:
    Type: String
    Description: Name of mesh

  AppMeshEgressIgnoredIpCsv:
    Type: String
    Default: 169.254.170.2,169.254.169.254

  ECSServicesDomain:
    Type: String
    Description: DNS namespace used by services e.g. default.svc.cluster.local

Resources:

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections on specified ports
      VpcId:
        'Fn::ImportValue': !Sub "${EnvironmentName}:VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9080
          ToPort: 9080
          CidrIp: 0.0.0.0/0

  # EC2 instance for running Docker containers
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      ImageId: !Ref EC2AMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId:
        'Fn::ImportValue': !Sub "${EnvironmentName}:PublicSubnet1"
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-instance
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x

            # CloudFormation support - use to signal cloudformation when finished
            yum install -y aws-cfn-bootstrap

            # golang support - use to build colorteller app
            amazon-linux-extras install -y golang1.11
            mkdir -p ~/go ~/go/bin ~/go/pkg ~/go/src/github.com/aws
            GOPATH=~/go go get github.com/aws/aws-app-mesh-examples/examples/apps/colorapp/src/colorteller/
            sudo mv ~/go/bin/colorteller /usr/local/bin
            # TODO set up systemd service instead
            SERVER_PORT=9080 COLOR=yellow /usr/local/bin/colorteller &

            # Docker support - add ec2-user to docker group
            amazon-linux-extras install -y docker
            systemctl start docker
            usermod -a -G docker ec2-user

            # pull/cache images before any other updates to network
            docker pull ${EnvoyImage}
            docker pull ${ProxyRouterManagerImage}

            # run Envoy proxy container
            docker run
              --name envoy
              --detach
              --net=host \
              --user "1337" \
              -e "APPMESH_VIRTUAL_NODE_NAME=mesh/${AppMeshMeshName}/virtualNode/colorteller-yellow-vn" \
              -e "ENVOY_LOG_LEVEL=${EnvoyLogLevel}" \
              -e "APPMESH_XDS_ENDPOINT=${AppMeshXdsEndpoint}" \
              ${EnvoyImage}

            # run proxy routing manager container *after* starting envoy
            # since this updates iptables to route all traffic through it
            docker run
              --name proxy_router_manager \
              --privileged \
              --cap-add NET_ADMIN \
              --detach \
              --net=host \
              -e "APPMESH_START_ENABLED=1" \
              -e "APPMESH_APP_PORTS=9080" \
              ${ProxyRouterManagerImage}

            # TODO: send failure exit code, but for now leave the instance up for debugging (/var/log/cloud-init-output.log)
            # notify CloudFormation that the instance is up
            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource EC2Instance

  ### colorteller-yellow.default.svc.cluster.local
  ColorTellerYellowServiceDiscoveryRecord:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Name: "colorteller-yellow"
      DnsConfig:
        NamespaceId:
          'Fn::ImportValue': !Sub "${EnvironmentName}:ECSServiceDiscoveryNamespace"
        DnsRecords:
          - Type: A
            TTL: 300
      HealthCheckCustomConfig:
        FailureThreshold: 1

  InstanceRegistration:
    Type: AWS::ServiceDiscovery::Instance
    Properties:
      InstanceAttributes:
        AWS_INSTANCE_IPV4: !GetAtt EC2Instance.PublicIp
      InstanceId: !Ref EC2Instance
      ServiceId: !Ref ColorTellerYellowServiceDiscoveryRecord 

Outputs:

  InstanceId:
    Description: The EC2 Instance ID
    Value: !Ref 'EC2Instance'

  InstancePublicIP:
    Description: The instance public IP
    Value: { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] }
