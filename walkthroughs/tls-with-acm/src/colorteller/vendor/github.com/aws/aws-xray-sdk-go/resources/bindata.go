// Code generated by go-bindata.
// sources:
// resources/AWSWhitelist.json
// resources/DefaultSamplingRules.json
// resources/ExampleSamplingRules.json
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesAwswhitelistJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcd\x72\xe2\x38\x10\xbe\xf3\x14\x2e\x9f\x73\xdb\x5b\x6e\x0c\x49\x28\x6a\xc9\x84\x04\x66\x73\xd8\xda\xa2\x64\xa9\x71\x34\xb1\x25\x47\x3f\x0c\xd4\x56\xde\x7d\x4b\x92\x21\x60\x8c\x2d\xec\xc0\x90\x64\x0f\x53\x13\xac\xb6\xfa\xeb\xaf\x7f\xd4\x2d\xff\xdb\x09\x82\x50\x82\x98\x53\x0c\x32\xbc\x0c\xcc\xef\x20\x08\xc9\x92\xa1\x94\x93\x68\xfd\x24\x08\x42\x9e\x81\x40\x8a\x72\x26\x37\x9e\x06\x41\xf8\x0d\x29\xfc\xd4\x07\x35\x50\x90\x6e\xad\x04\x41\x28\xe0\x45\x83\x54\x53\x02\x12\x0b\x9a\x29\x2e\x64\x41\x24\x08\xc2\x07\x27\x64\xde\xdf\x5d\x0d\x82\x30\x45\x59\x78\x19\x28\xa1\xe1\xa2\xb8\x14\x83\x9a\x3e\xc3\x52\xee\x5b\x17\xc0\x50\x0a\x53\xc5\xc3\xcb\x20\x54\x28\x4a\x60\x6a\x1e\xc8\x70\x4b\xf0\x75\xe3\xd7\xeb\xc5\x36\x7e\x99\x71\x26\x61\x9a\x21\x81\x52\x50\x60\xf1\xff\xbd\x8d\xbf\xc7\x99\xd4\x29\x90\x1e\xca\x10\xa6\x6a\xb9\xb9\xf9\x3f\x9d\x92\x8d\x1d\x65\x8f\x82\x2a\xf8\x9f\xb4\x15\x69\xdb\x30\x42\x63\x58\x8f\x27\x09\x60\x13\x72\xb7\xa0\x04\xc5\xb2\x9e\xd9\x9e\x00\xa4\x60\x62\x40\xef\xa3\xb5\x0a\x55\x3f\xe1\x11\x4a\xc6\x80\x39\x23\x48\x2c\x07\x8c\xc0\x02\x64\x11\xdb\x90\xe3\x7a\xa1\x91\xe0\x73\x2a\x29\x67\x40\x26\x4f\x82\xeb\xf8\x29\xd3\xaa\x28\x64\x81\x7e\x47\x29\xd4\x5b\x76\x05\x09\x54\xc7\x4b\x95\x61\xe5\x8a\xce\xc6\x6d\xce\xb8\xc6\x6e\x3b\x88\x46\x93\x54\xd1\x49\x74\xd5\x14\xc5\x3a\x9e\xa9\x54\xc0\xd4\x03\x20\x52\x12\x5b\x3f\x1d\xc3\xd7\x8b\x4c\x80\x34\x61\xe6\x17\x5a\xa7\xa8\x6e\x43\x2a\x95\xd5\x5e\x2c\x4c\x5e\x96\x5f\x2f\x70\xa2\x25\x9d\xc3\x58\x21\xa1\xde\xac\x28\xe6\x20\x4d\xa9\xf2\x30\xad\xb2\x88\xae\x77\x2f\x2d\xa1\x09\x95\xaa\xaa\x86\x62\xae\xd9\x5e\x81\x92\x22\xea\xe4\xf7\x17\xd1\x52\x32\x47\xba\x71\x0c\x9d\x79\xce\xdf\x6b\x10\xcb\x26\x76\x75\x95\x12\x34\xd2\x0a\xe4\x84\xf7\x61\xa7\xa6\x56\xa7\x8e\xad\xd6\xfb\x03\xaa\x41\xa2\x8d\x31\x62\x76\xd7\x1b\x2e\x7e\x21\xb1\xa3\x71\x0c\x86\x99\xf3\x49\x4f\x83\xf7\x33\xd0\x0e\x71\x0a\x6c\xe7\xd5\x3a\xb6\x8b\x0b\x5c\x99\xa3\xdc\x6e\x25\x8f\x9c\x27\x3d\x9b\xff\x25\xd1\xc3\x80\xf4\x8a\xb5\xa1\xdc\x77\x3f\x32\x82\x3e\x6d\x13\xe0\x8c\x6b\x7c\x30\xaf\xe3\xf3\x0a\x66\x94\x51\x37\xa9\x5c\xd4\xf7\x77\x4e\xed\x71\xfa\xb7\xce\xe6\xff\xb9\xad\xa1\x7c\x91\x3e\x73\x55\x97\x90\x11\x88\x94\xba\xe8\x6f\x40\xc8\x10\x45\x90\x14\x11\xdf\x6b\xd0\xf0\x43\x24\x1e\xad\xf4\x13\x62\x31\xdc\x82\x94\x28\x86\xbf\xa8\xa4\x11\x4d\x8c\xb3\x1b\x20\x59\x2b\x2d\x80\x79\xdb\x75\x42\x53\xe0\xda\x23\x03\xf6\xa0\xb2\x13\x55\x2b\x68\xed\x52\xe2\x06\xd1\x04\x88\xef\x7c\x62\x95\xb6\xab\xc1\xa5\x7e\x3d\x64\x92\xc8\x29\x7c\x37\xce\xea\x55\x7d\x14\x1f\x39\xd0\x8d\x7d\xe4\xcf\x4e\x1f\x94\x15\xde\xf0\xea\xef\x63\x67\x03\x84\x37\x70\xa3\xb5\x29\xe2\xb2\xd3\xd8\x2e\xdc\xfd\x62\x20\xba\x8f\xe3\x2e\xb6\x0d\xf3\x80\xb4\x34\xcc\xdf\x1f\x66\x70\xb9\x02\x44\x86\xa0\x14\x88\x31\xd7\x02\xbb\x30\xf8\x9d\x7e\x59\x6d\xe3\xe1\x16\x83\xbf\x25\x5e\xe3\x95\x91\x80\x19\x5d\xb4\x9d\xad\xde\x70\x1f\x75\xb4\x7a\x31\x6a\x9a\x8e\x56\x22\x3e\x45\x9a\x3f\x00\x06\x3a\x6f\x53\x70\xd7\xb9\xe9\x66\xd5\x42\xd6\xdc\xa2\xc5\x77\x9d\x46\x20\xee\x66\xb9\x8e\x5d\x11\xf7\xbc\x7a\x1f\xff\x53\xba\x20\xf0\x88\xa8\x32\x4b\xae\xaf\xf2\x69\xa3\x2b\x23\x67\x6d\xc4\x51\x03\x27\x75\x5a\x9a\x85\xce\x03\xa4\x7c\x0e\xed\xda\x33\xff\x00\x1a\x03\x23\x2d\xa2\xe7\x0a\x12\xb4\x5c\xf9\xc6\xa7\x1d\xbc\x28\xd3\xe0\xe3\xb2\xbd\x07\x99\x15\x7a\xaf\x2b\xe9\x95\xe7\xd0\x4a\xdb\x11\xae\xa7\x73\x83\x06\x1e\xed\xc2\x86\x77\x8e\xda\xe1\x78\xb8\xe1\x9a\x29\x41\xcf\x25\x71\x1a\x64\x7e\xde\xa1\x1d\x15\xfe\xcc\xea\x28\x45\x5f\x1c\xcd\x35\xc6\x20\xe5\x4c\x17\x9b\x9c\x77\x46\x24\xd7\x7a\x9a\x15\xa3\xf1\xc9\xda\x48\x8f\x10\x3c\x4d\x09\xf0\x4f\xfd\x4e\xf1\xaf\xed\x59\x3c\x41\x69\x44\x90\xcf\x38\x3e\x60\x73\xfe\xdc\xa8\xfe\xde\x68\x66\x2f\x42\xca\x3a\x5e\xb3\x2b\xb6\xea\x26\xcb\x6c\xf7\x72\x8c\xc7\x65\x8f\xef\x35\x4a\xe8\x8c\x82\x68\x3b\x10\xe5\xc0\xae\x85\xe0\x62\xe7\x62\x4a\x21\xa5\x65\x8f\x13\x8f\x89\xd2\x71\xd3\x95\x4b\x86\x5b\x13\xd4\xce\x24\x87\xfa\xa0\xdb\x98\x3f\x7c\xbc\xef\xe6\xf6\x6f\x1a\x3f\x83\x6a\xf4\xbd\xb6\xf4\x55\xbb\x32\x47\x89\xed\x40\xeb\xa3\x3e\xb2\x7b\xd8\x90\x3f\xb4\x46\xb8\x99\xf6\xe3\xe2\xef\x83\xba\x8b\x7e\x02\xde\x0b\xbe\x2a\x28\xfe\x84\x65\xcb\xaa\x76\x16\xde\xfb\x1a\x04\x1c\x9e\xf3\xf9\x25\x13\x12\xcf\x85\x8a\x58\xcb\xe5\xde\x83\xf2\xac\xb9\xa8\x04\xe7\xcc\x3b\x72\x0f\x45\x9c\x92\x29\xb7\x2c\x36\xeb\x5a\x86\x54\x2a\xc7\x64\x89\x17\x7c\x2c\x2d\x7f\xf9\x9d\x2d\xcd\xfd\xd4\xd8\xc2\x4f\x1b\x67\x3d\xce\x94\xfd\x66\x76\x54\xfa\xdb\x04\xd8\x48\x7f\xe5\x23\x63\xa4\xf3\xec\x1a\xf2\x38\xa6\x2c\x3e\xf3\x08\xac\xb6\x61\xc4\x13\x8a\x1b\x7d\x79\xca\xdf\xfc\x1c\xae\x9c\xa0\x8f\xe5\xca\xed\x7e\xbb\x63\xfe\xbd\x76\xfe\x0b\x00\x00\xff\xff\x43\xa8\x98\xe0\x72\x2a\x00\x00")

func resourcesAwswhitelistJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAwswhitelistJson,
		"resources/AWSWhitelist.json",
	)
}

func resourcesAwswhitelistJson() (*asset, error) {
	bytes, err := resourcesAwswhitelistJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/AWSWhitelist.json", size: 10866, mode: os.FileMode(420), modTime: time.Unix(1504302313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesDefaultsamplingrulesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x2a\x4b\x2d\x2a\xce\xcc\xcf\x53\xb2\x52\x30\xd4\x01\xf1\x53\x52\xd3\x12\x4b\x73\x4a\x94\xac\x14\x40\xd2\x0a\x0a\x4a\x69\x99\x15\xa9\x29\xf1\x25\x89\x45\xe9\xa9\x25\x30\x55\x0a\x0a\x4a\x45\x89\x25\xa9\x4a\x56\x0a\x06\x7a\x06\xa6\x5c\x0a\x0a\xb5\x60\xbd\x45\xa5\x39\xa9\xc5\x4a\x56\x0a\xd1\x5c\x0a\x0a\xb1\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xc9\x98\x17\x60\x61\x00\x00\x00")

func resourcesDefaultsamplingrulesJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefaultsamplingrulesJson,
		"resources/DefaultSamplingRules.json",
	)
}

func resourcesDefaultsamplingrulesJson() (*asset, error) {
	bytes, err := resourcesDefaultsamplingrulesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/DefaultSamplingRules.json", size: 97, mode: os.FileMode(420), modTime: time.Unix(1504288305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesExamplesamplingrulesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x8e\xd4\x30\x10\x84\xef\x79\x8a\x92\x2f\x0b\xab\x6c\x98\x3d\x70\xc9\x8d\x03\x2f\x80\xb8\x21\x14\xf5\xc4\x9d\x49\x0b\xc7\xce\xda\xed\xd9\x45\x68\xde\x1d\xd9\xd9\x61\x7e\x38\xba\xab\xda\x5d\x5f\xfd\x69\x00\x73\xe4\x98\x24\x78\xd3\xe3\xb9\x2d\x6f\xcb\x13\x65\xa7\xa6\x47\x91\xeb\x20\x8d\x51\x56\xdd\x4c\xe6\x0b\xde\x1d\x88\xd9\x71\x0b\x4a\x10\x3f\xba\x6c\xd9\x62\xcf\x2e\xbc\xb6\x90\x84\xc8\x2f\x59\x22\x5b\x88\x07\xf9\xdf\x48\xb4\xac\x4e\xfc\xa1\x2e\x25\x4c\xe2\xb8\xc3\x87\xc4\xf1\x28\x23\x0f\x9e\x16\x6e\x31\xab\xae\xc3\xc2\x3a\x07\xdb\x82\xbc\x45\x8e\x6e\x58\x49\x67\x50\x64\x4c\xf2\xc6\x16\x1a\xf0\xf0\xf8\x80\x29\x44\xe8\x5c\xee\x64\xc7\xdd\x47\xd3\x6e\x51\xab\x67\x50\x8a\x07\xd6\x33\x10\x60\x22\x29\x9b\x1e\xbb\x6e\xf7\xb9\x01\x4e\x15\xb3\xe6\x30\x3d\x7e\x54\xcb\x86\xfa\x3f\xec\xd7\xb7\x92\x9b\x51\x52\x3c\xed\x29\xb1\xad\x17\x37\xd0\x0e\xdf\x2a\x4c\x49\xc7\x47\x72\x99\x74\x03\x16\xfb\x14\xa2\xe5\xd8\x42\x67\xbe\xa9\x0b\xaf\xe2\x1c\xf6\x8c\x5c\xbe\x92\x09\x3e\x78\xc6\x42\x3a\xce\xd5\x2b\x7e\x0c\x4b\xad\x89\x5f\x32\x27\xed\xf0\xbd\x50\x4a\x02\x6d\xfb\x1b\x38\x63\x9c\x79\xfc\x15\xb2\x62\xa5\x03\x77\xef\xfc\x80\x11\x5b\x62\x3f\x5f\x06\xd7\x15\x17\xe9\xf1\x22\x5d\xf5\x7d\xa7\x9c\x8b\x2f\xe3\x4f\xe7\x53\x17\xf9\xbe\xe6\xdd\x3f\xe5\xb6\x69\xe0\xd4\x00\x3f\x9b\xd3\xdf\x00\x00\x00\xff\xff\xc1\xd0\x29\x3f\x69\x02\x00\x00")

func resourcesExamplesamplingrulesJsonBytes() ([]byte, error) {
	return bindataRead(
		_resourcesExamplesamplingrulesJson,
		"resources/ExampleSamplingRules.json",
	)
}

func resourcesExamplesamplingrulesJson() (*asset, error) {
	bytes, err := resourcesExamplesamplingrulesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/ExampleSamplingRules.json", size: 617, mode: os.FileMode(420), modTime: time.Unix(1504288305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/AWSWhitelist.json": resourcesAwswhitelistJson,
	"resources/DefaultSamplingRules.json": resourcesDefaultsamplingrulesJson,
	"resources/ExampleSamplingRules.json": resourcesExamplesamplingrulesJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"AWSWhitelist.json": &bintree{resourcesAwswhitelistJson, map[string]*bintree{}},
		"DefaultSamplingRules.json": &bintree{resourcesDefaultsamplingrulesJson, map[string]*bintree{}},
		"ExampleSamplingRules.json": &bintree{resourcesExamplesamplingrulesJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

