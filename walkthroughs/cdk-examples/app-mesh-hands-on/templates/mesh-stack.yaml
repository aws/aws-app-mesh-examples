Description: Defines mesh components like the virtual nodes, routers and services.
Resources:
  meshcomponentsMesh4034AF8C:
    Type: AWS::AppMesh::Mesh
    Properties:
      MeshName: test
      Spec: {}
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsMesh/Resource
  meshcomponentsBackendV1VirtualNodeAE0BDBB9:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Listeners:
          - PortMapping:
              Port: 80
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: local
            ServiceName:
              Fn::ImportValue: base:ExportsOutputFnGetAttbaseDNSNamespaceservicediscoveryBackendV1CloudMapServiceBB1EBEBBNameBC483848
      VirtualNodeName: backend-vn
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendV1VirtualNode/Resource
  meshcomponentsBackendV2VirtualNode69EAFF36:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Listeners:
          - PortMapping:
              Port: 80
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: local
            ServiceName:
              Fn::ImportValue: base:ExportsOutputFnGetAttbaseDNSNamespaceservicediscoveryBackendV2CloudMapService571E6D8ENameB67B8EDA
      VirtualNodeName: backend-1-vn
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendV2VirtualNode/Resource
  meshcomponentsFrontendVirtualNodeC3A75ECD:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Backends:
          - VirtualService:
              VirtualServiceName: backend.local
        Listeners:
          - PortMapping:
              Port: 80
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: local
            ServiceName:
              Fn::ImportValue: base:ExportsOutputFnGetAttbaseDNSNamespaceservicediscoveryFrontendCloudMapService4AD96C61NameD17057F7
      VirtualNodeName: frontend-vn
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsFrontendVirtualNode/Resource
  meshcomponentsBackendVirtualRouter1742C375:
    Type: AWS::AppMesh::VirtualRouter
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Listeners:
          - PortMapping:
              Port: 80
              Protocol: http
      VirtualRouterName: backend-vr
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendVirtualRouter/Resource
  meshcomponentsBackendVirtualServiceF618E0AD:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Provider:
          VirtualRouter:
            VirtualRouterName:
              Fn::GetAtt:
                - meshcomponentsBackendVirtualRouter1742C375
                - VirtualRouterName
      VirtualServiceName: backend.local
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendVirtualService/Resource
  meshcomponentsBackendRouteC2B16ACB:
    Type: AWS::AppMesh::Route
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        HttpRoute:
          Action:
            WeightedTargets:
              - VirtualNode:
                  Fn::GetAtt:
                    - meshcomponentsBackendV1VirtualNodeAE0BDBB9
                    - VirtualNodeName
                Weight: 1
              - VirtualNode:
                  Fn::GetAtt:
                    - meshcomponentsBackendV2VirtualNode69EAFF36
                    - VirtualNodeName
                Weight: 1
          Match:
            Prefix: /
      VirtualRouterName:
        Fn::GetAtt:
          - meshcomponentsBackendVirtualRouter1742C375
          - VirtualRouterName
      RouteName: backend-route
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendRoute/Resource
  ecsservicesBackendV1AppMeshFargateServicebackendTaskSecurityGroup595E6DE0:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesBackendV1AppMeshFargateService/backendTaskSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: base:ExportsOutputRefbaseVpc7C0ACBA86A216E62
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesBackendV1AppMeshFargateService/backendTaskSecurityGroup/Resource
  ecsservicesBackendV1AppMeshFargateServicebackendTaskDefinition4787873B:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: karthequian/helloworld:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup8F974045B90DCB80
              awslogs-stream-prefix: backend-app
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseExecutionRoleCCAA3C20Arn38BBD1AC
      Family: backend
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseTaskRole5C307D21ArnE5452BC8
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesBackendV1AppMeshFargateService/backendTaskDefinition/Resource
  ecsservicesBackendV1AppMeshFargateServicebackendServiceE4FE6F47:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: base:ExportsOutputRefbaseClusterFC5E5649755977D5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::GetAtt:
                - ecsservicesBackendV1AppMeshFargateServicebackendTaskSecurityGroup595E6DE0
                - GroupId
          Subnets:
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPublicSubnet1Subnet3BFD8A57038A3D23
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPublicSubnet2Subnet6185658D75DECB3F
      ServiceName: backend
      ServiceRegistries:
        - RegistryArn:
            Fn::ImportValue: base:ExportsOutputFnGetAttbaseDNSNamespaceservicediscoveryBackendV1CloudMapServiceBB1EBEBBArn624EFEED
      TaskDefinition:
        Ref: ecsservicesBackendV1AppMeshFargateServicebackendTaskDefinition4787873B
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesBackendV1AppMeshFargateService/backendService/Service
  ecsservicesBackendV2AppMeshFargateServicebackend1TaskSecurityGroupA271AF40:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesBackendV2AppMeshFargateService/backend-1TaskSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: base:ExportsOutputRefbaseVpc7C0ACBA86A216E62
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesBackendV2AppMeshFargateService/backend-1TaskSecurityGroup/Resource
  ecsservicesBackendV2AppMeshFargateServicebackend1TaskDefinition7CCB4A84:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: tutum/hello-world:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup8F974045B90DCB80
              awslogs-stream-prefix: backend-1-app
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseExecutionRoleCCAA3C20Arn38BBD1AC
      Family: backend-1
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseTaskRole5C307D21ArnE5452BC8
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesBackendV2AppMeshFargateService/backend-1TaskDefinition/Resource
  ecsservicesBackendV2AppMeshFargateServicebackend1Service5AF16EBF:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: base:ExportsOutputRefbaseClusterFC5E5649755977D5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::GetAtt:
                - ecsservicesBackendV2AppMeshFargateServicebackend1TaskSecurityGroupA271AF40
                - GroupId
          Subnets:
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPublicSubnet1Subnet3BFD8A57038A3D23
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPublicSubnet2Subnet6185658D75DECB3F
      ServiceName: backend-1
      ServiceRegistries:
        - RegistryArn:
            Fn::ImportValue: base:ExportsOutputFnGetAttbaseDNSNamespaceservicediscoveryBackendV2CloudMapService571E6D8EArn713DA80B
      TaskDefinition:
        Ref: ecsservicesBackendV2AppMeshFargateServicebackend1TaskDefinition7CCB4A84
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesBackendV2AppMeshFargateService/backend-1Service/Service
  ecsservicesFrontendAppMeshFargateServicefrontendTaskSecurityGroupC4C23688:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesFrontendAppMeshFargateService/frontendTaskSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: base:ExportsOutputRefbaseVpc7C0ACBA86A216E62
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesFrontendAppMeshFargateService/frontendTaskSecurityGroup/Resource
  ecsservicesFrontendAppMeshFargateServicefrontendTaskDefinition52A9F8A8:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: usernames/nginx-appmesh:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup8F974045B90DCB80
              awslogs-stream-prefix: frontend-app
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseExecutionRoleCCAA3C20Arn38BBD1AC
      Family: frontend
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseTaskRole5C307D21ArnE5452BC8
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesFrontendAppMeshFargateService/frontendTaskDefinition/Resource
  ecsservicesFrontendAppMeshFargateServicefrontendService98FA5290:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: base:ExportsOutputRefbaseClusterFC5E5649755977D5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::GetAtt:
                - ecsservicesFrontendAppMeshFargateServicefrontendTaskSecurityGroupC4C23688
                - GroupId
          Subnets:
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPublicSubnet1Subnet3BFD8A57038A3D23
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPublicSubnet2Subnet6185658D75DECB3F
      ServiceName: frontend
      ServiceRegistries:
        - RegistryArn:
            Fn::ImportValue: base:ExportsOutputFnGetAttbaseDNSNamespaceservicediscoveryFrontendCloudMapService4AD96C61Arn6771F0AB
      TaskDefinition:
        Ref: ecsservicesFrontendAppMeshFargateServicefrontendTaskDefinition52A9F8A8
    DependsOn:
      - ecsservicesBackendV1AppMeshFargateServicebackendServiceE4FE6F47
      - ecsservicesBackendV2AppMeshFargateServicebackend1Service5AF16EBF
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/ecs-servicesFrontendAppMeshFargateService/frontendService/Service
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/12QQQ/CIAyFf4v3DXUe9K7Rkx4249Ugq9pNYSmgMcv+u4CYoBfafq8veaVgxZxNRvypc1G3+Q1PrK8MF23m0LHnXXcHfWX91r3Z8ixDPSAZy287VYNn6Rj7UlkDlIgRxKkCeqBIzV8S9jwPzZCBKFwgEJbQvDakbOfFH+CXNOvXnC7cwJ7rdgVnlGhQSb/8T5Q0HCVQwqI3iRXbYQhZQCtLH8HZ62AaMukOZo0eP6YLNnOf2GjEnKw0eAdWfuob8s2Tf2ABAAA=
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

