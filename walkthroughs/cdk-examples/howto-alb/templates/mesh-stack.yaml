Description: Defines mesh components like the virtual nodes, routers and services.
Resources:
  meshcomponentsMesh4034AF8C:
    Type: AWS::AppMesh::Mesh
    Properties:
      MeshName: howto-alb
      Spec: {}
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsMesh/Resource
  meshcomponentsBackendV1VirtualNodeAE0BDBB9:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Listeners:
          - PortMapping:
              Port: 8080
              Protocol: http
        ServiceDiscovery:
          DNS:
            Hostname:
              Fn::ImportValue: service-discovery:ExportsOutputFnGetAttservicediscoveryBackendV1LoadBalancerD27C588DDNSName1A02D96D
      VirtualNodeName: howto-alb-backend-v1-node
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendV1VirtualNode/Resource
  meshcomponentsBackendV2VirtualNode69EAFF36:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Listeners:
          - PortMapping:
              Port: 8080
              Protocol: http
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: howto-alb.pvt.local
            ServiceName:
              Fn::ImportValue: base:ExportsOutputFnGetAttbaseDNSNamespaceservicediscoveryBackendV2CloudMapService571E6D8ENameB67B8EDA
      VirtualNodeName: howto-alb-backend-v2-node
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendV2VirtualNode/Resource
  meshcomponentsBackendVirtualRouter1742C375:
    Type: AWS::AppMesh::VirtualRouter
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Listeners:
          - PortMapping:
              Port: 8080
              Protocol: http
      VirtualRouterName: howto-alb-backend-router
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendVirtualRouter/Resource
  meshcomponentsBackendVirtualServiceF618E0AD:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Provider:
          VirtualRouter:
            VirtualRouterName:
              Fn::GetAtt:
                - meshcomponentsBackendVirtualRouter1742C375
                - VirtualRouterName
      VirtualServiceName: backend.howto-alb.hosted.local
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendVirtualService/Resource
  meshcomponentsBackendRouteC2B16ACB:
    Type: AWS::AppMesh::Route
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        HttpRoute:
          Action:
            WeightedTargets:
              - VirtualNode:
                  Fn::GetAtt:
                    - meshcomponentsBackendV1VirtualNodeAE0BDBB9
                    - VirtualNodeName
                Weight: 50
              - VirtualNode:
                  Fn::GetAtt:
                    - meshcomponentsBackendV2VirtualNode69EAFF36
                    - VirtualNodeName
                Weight: 50
          Match:
            Prefix: /
      VirtualRouterName:
        Fn::GetAtt:
          - meshcomponentsBackendVirtualRouter1742C375
          - VirtualRouterName
      RouteName: howto-alb-backend-route
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsBackendRoute/Resource
  meshcomponentsFrontendVirtualNodeC3A75ECD:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName:
        Fn::GetAtt:
          - meshcomponentsMesh4034AF8C
          - MeshName
      Spec:
        Backends:
          - VirtualService:
              VirtualServiceName: backend.howto-alb.hosted.local
        Listeners:
          - PortMapping:
              Port: 8080
              Protocol: http
        ServiceDiscovery:
          DNS:
            Hostname:
              Fn::ImportValue: service-discovery:ExportsOutputFnGetAttservicediscoveryFrontendLoadBalancerBF140200DNSName119C3D4C
      VirtualNodeName: howto-alb-frontend-node
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/mesh-componentsFrontendVirtualNode/Resource
  BackendV1AppMeshFargateServicebackendv1TaskSecurityGroupE1C0178A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV1AppMeshFargateService/backend-v1TaskSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:ALL TRAFFIC
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: base:ExportsOutputRefbaseVpc7C0ACBA86A216E62
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV1AppMeshFargateService/backend-v1TaskSecurityGroup/Resource
  BackendV1AppMeshFargateServicebackendv1TaskSecurityGroupfromBaseStackServiceDiscoveryStackservicediscoveryBackendV1LoadBalancerSecurityGroup92905D4880804AB77BED:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8080
      GroupId:
        Fn::GetAtt:
          - BackendV1AppMeshFargateServicebackendv1TaskSecurityGroupE1C0178A
          - GroupId
      SourceSecurityGroupId:
        Fn::ImportValue: service-discovery:ExportsOutputFnGetAttservicediscoveryBackendV1LoadBalancerSecurityGroup8F833D5BGroupId95AF671F
      ToPort: 8080
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV1AppMeshFargateService/backend-v1TaskSecurityGroup/from BaseStackServiceDiscoveryStackservicediscoveryBackendV1LoadBalancerSecurityGroup92905D48:8080
  BackendV1AppMeshFargateServicebackendv1TaskSecurityGroupBaseStackServiceDiscoveryStackservicediscoveryBackendV1LoadBalancerSecurityGroup92905D488080fromA8694787:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::ImportValue: service-discovery:ExportsOutputFnGetAttservicediscoveryBackendV1LoadBalancerSecurityGroup8F833D5BGroupId95AF671F
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - BackendV1AppMeshFargateServicebackendv1TaskSecurityGroupE1C0178A
          - GroupId
      FromPort: 8080
      ToPort: 8080
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV1AppMeshFargateService/backend-v1TaskSecurityGroup/BaseStackServiceDiscoveryStackservicediscoveryBackendV1LoadBalancerSecurityGroup92905D48:8080 from
  BackendV1AppMeshFargateServicebackendv1TaskDefinition2146F94E:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - DependsOn:
            - Condition: START
              ContainerName: xray
          Environment:
            - Name: COLOR
              Value: blue
            - Name: PORT
              Value: "8080"
            - Name: XRAY_APP_NAME
              Value:
                Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - meshcomponentsMesh4034AF8C
                        - MeshName
                    - /
                    - Fn::GetAtt:
                        - meshcomponentsBackendV1VirtualNodeAE0BDBB9
                        - VirtualNodeName
          Essential: true
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:b898b12b972cbc5f0828e84a5e8ffbaa49b6c3ddd1bd18669b1b17f23b855bbb
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup444E3C741E44F30C
              awslogs-stream-prefix: backend-v1-app
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
        - Essential: true
          Image: public.ecr.aws/xray/aws-xray-daemon:3.3.3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup444E3C741E44F30C
              awslogs-stream-prefix: backend-v1-xray
              awslogs-region:
                Ref: AWS::Region
          Name: xray
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          User: "1337"
      Cpu: "256"
      ExecutionRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseExecutionRoleCCAA3C20Arn38BBD1AC
      Family: blue
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseTaskRole5C307D21ArnE5452BC8
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV1AppMeshFargateService/backend-v1TaskDefinition/Resource
  BackendV1AppMeshFargateServicebackendv1Service6F4639E8:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: base:ExportsOutputRefbaseClusterFC5E5649755977D5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn:
            Fn::ImportValue: service-discovery:ExportsOutputRefservicediscoveryBackendV1LoadBalancerbackendv1Listenerbackendv1TargetGroupGroup68598F6478C06AB4
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - BackendV1AppMeshFargateServicebackendv1TaskSecurityGroupE1C0178A
                - GroupId
          Subnets:
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPrivateSubnet1Subnet17B6B51CFE21D26F
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPrivateSubnet2Subnet27AF2E393810D0E8
      ServiceName: backend-v1
      TaskDefinition:
        Ref: BackendV1AppMeshFargateServicebackendv1TaskDefinition2146F94E
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV1AppMeshFargateService/backend-v1Service/Service
  BackendV2AppMeshFargateServicebackendv2TaskSecurityGroup59900CF1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV2AppMeshFargateService/backend-v2TaskSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:ALL TRAFFIC
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: base:ExportsOutputRefbaseVpc7C0ACBA86A216E62
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV2AppMeshFargateService/backend-v2TaskSecurityGroup/Resource
  BackendV2AppMeshFargateServicebackendv2TaskDefinitionF520462C:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - DependsOn:
            - Condition: HEALTHY
              ContainerName: envoy
            - Condition: START
              ContainerName: xray
          Environment:
            - Name: COLOR
              Value: green
            - Name: PORT
              Value: "8080"
            - Name: XRAY_APP_NAME
              Value:
                Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - meshcomponentsMesh4034AF8C
                        - MeshName
                    - /
                    - Fn::GetAtt:
                        - meshcomponentsBackendV2VirtualNode69EAFF36
                        - VirtualNodeName
          Essential: true
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:b898b12b972cbc5f0828e84a5e8ffbaa49b6c3ddd1bd18669b1b17f23b855bbb
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup444E3C741E44F30C
              awslogs-stream-prefix: backend-v2-app
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
        - DependsOn:
            - Condition: START
              ContainerName: xray
          Environment:
            - Name: ENVOY_LOG_LEVEL
              Value: debug
            - Name: ENABLE_ENVOY_XRAY_TRACING
              Value: "1"
            - Name: ENABLE_ENVOY_STATS_TAGS
              Value: "1"
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value:
                Fn::Join:
                  - ""
                  - - mesh/
                    - Fn::GetAtt:
                        - meshcomponentsMesh4034AF8C
                        - MeshName
                    - /virtualNode/
                    - Fn::GetAtt:
                        - meshcomponentsBackendV2VirtualNode69EAFF36
                        - VirtualNodeName
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
            Interval: 5
            Retries: 10
            Timeout: 10
          Image: public.ecr.aws/appmesh/aws-appmesh-envoy:v1.21.2.0-prod
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup444E3C741E44F30C
              awslogs-stream-prefix: backend-v2-envoy
              awslogs-region:
                Ref: AWS::Region
          Name: envoy
          PortMappings:
            - ContainerPort: 9901
              Protocol: tcp
            - ContainerPort: 15000
              Protocol: tcp
            - ContainerPort: 15001
              Protocol: tcp
          Ulimits:
            - HardLimit: 15000
              Name: nofile
              SoftLimit: 15000
          User: "1337"
        - Essential: true
          Image: public.ecr.aws/xray/aws-xray-daemon:3.3.3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup444E3C741E44F30C
              awslogs-stream-prefix: backend-v2-xray
              awslogs-region:
                Ref: AWS::Region
          Name: xray
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          User: "1337"
      Cpu: "256"
      ExecutionRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseExecutionRoleCCAA3C20Arn38BBD1AC
      Family: green
      Memory: "512"
      NetworkMode: awsvpc
      ProxyConfiguration:
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: AppPorts
            Value: "8080"
          - Name: IgnoredUID
            Value: "1337"
          - Name: EgressIgnoredIPs
            Value: 169.254.170.2,169.254.169.254
        Type: APPMESH
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseTaskRole5C307D21ArnE5452BC8
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV2AppMeshFargateService/backend-v2TaskDefinition/Resource
  BackendV2AppMeshFargateServicebackendv2Service150BFEDE:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: base:ExportsOutputRefbaseClusterFC5E5649755977D5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - BackendV2AppMeshFargateServicebackendv2TaskSecurityGroup59900CF1
                - GroupId
          Subnets:
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPrivateSubnet1Subnet17B6B51CFE21D26F
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPrivateSubnet2Subnet27AF2E393810D0E8
      ServiceName: backend-v2
      ServiceRegistries:
        - RegistryArn:
            Fn::ImportValue: base:ExportsOutputFnGetAttbaseDNSNamespaceservicediscoveryBackendV2CloudMapService571E6D8EArn713DA80B
      TaskDefinition:
        Ref: BackendV2AppMeshFargateServicebackendv2TaskDefinitionF520462C
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/BackendV2AppMeshFargateService/backend-v2Service/Service
  FrontendAppMeshFargateServicefrontendTaskSecurityGroup7A9F8B66:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BaseStack/ServiceDiscoveryStack/MeshStack/FrontendAppMeshFargateService/frontendTaskSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:ALL TRAFFIC
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: base:ExportsOutputRefbaseVpc7C0ACBA86A216E62
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/FrontendAppMeshFargateService/frontendTaskSecurityGroup/Resource
  FrontendAppMeshFargateServicefrontendTaskSecurityGroupfromBaseStackServiceDiscoveryStackservicediscoveryFrontendLoadBalancerSecurityGroup1B1E42E08080E5EB1297:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 8080
      GroupId:
        Fn::GetAtt:
          - FrontendAppMeshFargateServicefrontendTaskSecurityGroup7A9F8B66
          - GroupId
      SourceSecurityGroupId:
        Fn::ImportValue: service-discovery:ExportsOutputFnGetAttservicediscoveryFrontendLoadBalancerSecurityGroup9C927B55GroupIdC6563029
      ToPort: 8080
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/FrontendAppMeshFargateService/frontendTaskSecurityGroup/from BaseStackServiceDiscoveryStackservicediscoveryFrontendLoadBalancerSecurityGroup1B1E42E0:8080
  FrontendAppMeshFargateServicefrontendTaskSecurityGroupBaseStackServiceDiscoveryStackservicediscoveryFrontendLoadBalancerSecurityGroup1B1E42E08080from2F701753:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::ImportValue: service-discovery:ExportsOutputFnGetAttservicediscoveryFrontendLoadBalancerSecurityGroup9C927B55GroupIdC6563029
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - FrontendAppMeshFargateServicefrontendTaskSecurityGroup7A9F8B66
          - GroupId
      FromPort: 8080
      ToPort: 8080
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/FrontendAppMeshFargateService/frontendTaskSecurityGroup/BaseStackServiceDiscoveryStackservicediscoveryFrontendLoadBalancerSecurityGroup1B1E42E0:8080 from
  FrontendAppMeshFargateServicefrontendTaskDefinition8ADA376B:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - DependsOn:
            - Condition: HEALTHY
              ContainerName: envoy
            - Condition: START
              ContainerName: xray
          Environment:
            - Name: PORT
              Value: "8080"
            - Name: COLOR_HOST
              Value:
                Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - meshcomponentsBackendVirtualServiceF618E0AD
                        - VirtualServiceName
                    - :8080
            - Name: XRAY_APP_NAME
              Value:
                Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - meshcomponentsMesh4034AF8C
                        - MeshName
                    - /
                    - Fn::GetAtt:
                        - meshcomponentsFrontendVirtualNodeC3A75ECD
                        - VirtualNodeName
          Essential: true
          Image:
            Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:83e4b816cd300772d3bc93f8f86127156f6daaf4f0484036cbefc609aee6e246
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup444E3C741E44F30C
              awslogs-stream-prefix: frontend-app
              awslogs-region:
                Ref: AWS::Region
          Name: app
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
        - DependsOn:
            - Condition: START
              ContainerName: xray
          Environment:
            - Name: ENVOY_LOG_LEVEL
              Value: debug
            - Name: ENABLE_ENVOY_XRAY_TRACING
              Value: "1"
            - Name: ENABLE_ENVOY_STATS_TAGS
              Value: "1"
            - Name: APPMESH_VIRTUAL_NODE_NAME
              Value:
                Fn::Join:
                  - ""
                  - - mesh/
                    - Fn::GetAtt:
                        - meshcomponentsMesh4034AF8C
                        - MeshName
                    - /virtualNode/
                    - Fn::GetAtt:
                        - meshcomponentsFrontendVirtualNodeC3A75ECD
                        - VirtualNodeName
          Essential: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
            Interval: 5
            Retries: 10
            Timeout: 10
          Image: public.ecr.aws/appmesh/aws-appmesh-envoy:v1.21.2.0-prod
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup444E3C741E44F30C
              awslogs-stream-prefix: frontend-envoy
              awslogs-region:
                Ref: AWS::Region
          Name: envoy
          PortMappings:
            - ContainerPort: 9901
              Protocol: tcp
            - ContainerPort: 15000
              Protocol: tcp
            - ContainerPort: 15001
              Protocol: tcp
          Ulimits:
            - HardLimit: 15000
              Name: nofile
              SoftLimit: 15000
          User: "1337"
        - Essential: true
          Image: public.ecr.aws/xray/aws-xray-daemon:3.3.3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: base:ExportsOutputRefbaseLogGroup444E3C741E44F30C
              awslogs-stream-prefix: frontend-xray
              awslogs-region:
                Ref: AWS::Region
          Name: xray
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          User: "1337"
      Cpu: "256"
      ExecutionRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseExecutionRoleCCAA3C20Arn38BBD1AC
      Family: front
      Memory: "512"
      NetworkMode: awsvpc
      ProxyConfiguration:
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: AppPorts
            Value: "8080"
          - Name: IgnoredUID
            Value: "1337"
          - Name: EgressIgnoredIPs
            Value: 169.254.170.2,169.254.169.254
        Type: APPMESH
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::ImportValue: base:ExportsOutputFnGetAttbaseTaskRole5C307D21ArnE5452BC8
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/FrontendAppMeshFargateService/frontendTaskDefinition/Resource
  FrontendAppMeshFargateServicefrontendService1B3774F8:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: base:ExportsOutputRefbaseClusterFC5E5649755977D5
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn:
            Fn::ImportValue: service-discovery:ExportsOutputRefservicediscoveryFrontendLoadBalancerfrontendListenerfrontendTargetGroupGroupE6F89CE20000C600
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - FrontendAppMeshFargateServicefrontendTaskSecurityGroup7A9F8B66
                - GroupId
          Subnets:
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPrivateSubnet1Subnet17B6B51CFE21D26F
            - Fn::ImportValue: base:ExportsOutputRefbaseVpcPrivateSubnet2Subnet27AF2E393810D0E8
      ServiceName: frontend
      TaskDefinition:
        Ref: FrontendAppMeshFargateServicefrontendTaskDefinition8ADA376B
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/FrontendAppMeshFargateService/frontendService/Service
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/32QQW/CMAyFfwv3NoxygDsDxGE7wMQVhdSAKSSVnTChqv+dJGRSNCQu8fP38iLHlagm4mMgf7lUdVNecC+6jZWqKTzadbJtr8An0X35s5gddKxbJOvk5dvUEFjeJr02zgJlZgKp2wDdUOXhPxLvBR5FX4Cq/ECgHKG9L8m4NpjvwUofCZhf+Dzi8CaLbiHpKC38SG4+4YAaLRodIv+J0VaiBspYyma/SLLv4+jAxtHT8PE6hvpC+/2IMw9vo6kY+52fGbEkpy1eQayf9QHFUSEwjwEAAA==
    Metadata:
      aws:cdk:path: BaseStack/ServiceDiscoveryStack/MeshStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

