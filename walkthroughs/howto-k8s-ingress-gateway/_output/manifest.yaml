---
apiVersion: v1
kind: Namespace
metadata:
  name: howto-k8s-ingress-gateway
  labels:
    mesh: howto-k8s-ingress-gateway
    gateway: ingress-gw
    appmesh.k8s.aws/sidecarInjectorWebhook: enabled
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: Mesh
metadata:
  name: howto-k8s-ingress-gateway
spec:
  namespaceSelector:
    matchLabels:
      mesh: howto-k8s-ingress-gateway
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualGateway
metadata:
  name: ingress-gw
  namespace: howto-k8s-ingress-gateway
spec:
  namespaceSelector:
    matchLabels:
      gateway: ingress-gw
  listeners:
    - portMapping:
        port: 8088
        protocol: http
      healthCheck:
        path: /ping
        healthyThreshold: 6
        intervalMillis: 6000
        protocol: http
        timeoutMillis: 3000
        unhealthyThreshold: 3
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: GatewayRoute
metadata:
  name: gateway-route-headers
  namespace: howto-k8s-ingress-gateway
spec:
  httpRoute:
    match:
      prefix: "/headers"
    action:
      target:
        virtualService:
          virtualServiceRef:
            name: color-headers
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: GatewayRoute
metadata:
  name: gateway-route-paths
  namespace: howto-k8s-ingress-gateway
spec:
  httpRoute:
    match:
      prefix: "/paths"
    action:
      target:
        virtualService:
          virtualServiceRef:
            name: color-paths
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualNode
metadata:
  name: white
  namespace: howto-k8s-ingress-gateway
spec:
  podSelector:
    matchLabels:
      app: color
      version: white
  listeners:
    - portMapping:
        port: 8080
        protocol: http
      healthCheck:
        protocol: http
        path: '/ping'
        healthyThreshold: 2
        unhealthyThreshold: 2
        timeoutMillis: 2000
        intervalMillis: 5000
  serviceDiscovery:
    dns:
      hostname: color-white.howto-k8s-ingress-gateway.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualNode
metadata:
  name: blue
  namespace: howto-k8s-ingress-gateway
spec:
  podSelector:
    matchLabels:
      app: color
      version: blue
  listeners:
    - portMapping:
        port: 8080
        protocol: http
      healthCheck:
        protocol: http
        path: '/ping'
        healthyThreshold: 2
        unhealthyThreshold: 2
        timeoutMillis: 2000
        intervalMillis: 5000
  serviceDiscovery:
    dns:
      hostname: color-blue.howto-k8s-ingress-gateway.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualNode
metadata:
  name: red
  namespace: howto-k8s-ingress-gateway
spec:
  podSelector:
    matchLabels:
      app: color
      version: red
  listeners:
    - portMapping:
        port: 8080
        protocol: http
      healthCheck:
        protocol: http
        path: '/ping'
        healthyThreshold: 2
        unhealthyThreshold: 2
        timeoutMillis: 2000
        intervalMillis: 5000
  serviceDiscovery:
    dns:
      hostname: color-red.howto-k8s-ingress-gateway.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualNode
metadata:
  name: yellow
  namespace: howto-k8s-ingress-gateway
spec:
  podSelector:
    matchLabels:
      app: color
      version: yellow
  listeners:
    - portMapping:
        port: 8080
        protocol: http
      healthCheck:
        protocol: http
        path: '/ping'
        healthyThreshold: 2
        unhealthyThreshold: 2
        timeoutMillis: 2000
        intervalMillis: 5000
  serviceDiscovery:
    dns:
      hostname: color-yellow.howto-k8s-ingress-gateway.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualNode
metadata:
  name: green
  namespace: howto-k8s-ingress-gateway
spec:
  podSelector:
    matchLabels:
      app: color
      version: green
  listeners:
    - portMapping:
        port: 8080
        protocol: http
      healthCheck:
        protocol: http
        path: '/ping'
        healthyThreshold: 2
        unhealthyThreshold: 2
        timeoutMillis: 2000
        intervalMillis: 5000
  serviceDiscovery:
    dns:
      hostname: color-green.howto-k8s-ingress-gateway.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualService
metadata:
  name: color-headers
  namespace: howto-k8s-ingress-gateway
spec:
  awsName: color-headers.howto-k8s-ingress-gateway.svc.cluster.local
  provider:
    virtualRouter:
      virtualRouterRef:
        name: color-headers
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualService
metadata:
  name: color-paths
  namespace: howto-k8s-ingress-gateway
spec:
  awsName: color-paths.howto-k8s-ingress-gateway.svc.cluster.local
  provider:
    virtualRouter:
      virtualRouterRef:
        name: color-paths
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualRouter
metadata:
  namespace: howto-k8s-ingress-gateway
  name: color-headers
spec:
  listeners:
    - portMapping:
        port: 8080
        protocol: http
  routes:
    - name: color-route-blue
      priority: 10
      httpRoute:
        match:
          prefix: /
          headers:
            - name: color_header
              match:
                exact: blue
        action:
          weightedTargets:
            - virtualNodeRef:
                name: blue
              weight: 1
    - name: color-route-green
      priority: 20
      httpRoute:
        match:
          prefix: /
          headers:
            - name: color_header
              match:
                regex: ".*green.*"
        action:
          weightedTargets:
            - virtualNodeRef:
                name: green
              weight: 1
    - name: color-route-red
      priority: 30
      httpRoute:
        match:
          prefix: /
          headers:
            - name: color_header
              match:
                prefix: red
        action:
          weightedTargets:
            - virtualNodeRef:
                name: red
              weight: 1
    - name: color-route-yellow
      priority: 40
      httpRoute:
        match:
          prefix: /
          headers:
            - name: color_header
              #no match means if header present
        action:
          weightedTargets:
            - virtualNodeRef:
                name: yellow
              weight: 1
    - name: color-route-white
      httpRoute:
        match:
          #default match with no priority
          prefix: /
        action:
          weightedTargets:
            - virtualNodeRef:
                name: white
              weight: 1
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualRouter
metadata:
  namespace: howto-k8s-ingress-gateway
  name: color-paths
spec:
  listeners:
    - portMapping:
        port: 8080
        protocol: http
  routes:
    - name: color-route-blue
      priority: 10
      httpRoute:
        match:
          prefix: /blue
        action:
          weightedTargets:
            - virtualNodeRef:
                name: blue
              weight: 1
    - name: color-route-green
      priority: 20
      httpRoute:
        match:
          prefix: /green
        action:
          weightedTargets:
            - virtualNodeRef:
                name: green
              weight: 1
    - name: color-route-red
      priority: 30
      httpRoute:
        match:
          prefix: /red
        action:
          weightedTargets:
            - virtualNodeRef:
                name: red
              weight: 1
    - name: color-route-yellow
      priority: 40
      httpRoute:
        match:
          prefix: /yellow
        action:
          weightedTargets:
            - virtualNodeRef:
                name: yellow
              weight: 1
    - name: color-route-white
      httpRoute:
        match:
          prefix: /
        action:
          weightedTargets:
            - virtualNodeRef:
                name: white
              weight: 1
---
apiVersion: v1
kind: Service
metadata:
  name: color-green
  namespace: howto-k8s-ingress-gateway
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: color
    version: green
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: green
  namespace: howto-k8s-ingress-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: color
      version: green
  template:
    metadata:
      labels:
        app: color
        version: green
      annotations:
        appmesh.k8s.aws/preview: "true"
    spec:
      containers:
        - name: app
          image: 669977933099.dkr.ecr.us-west-2.amazonaws.com/howto-k8s-ingress-gateway/colorapp
          ports:
            - containerPort: 8080
          env:
            - name: "COLOR"
              value: "green"
---
apiVersion: v1
kind: Service
metadata:
  name: color-blue
  namespace: howto-k8s-ingress-gateway
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: color
    version: blue
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blue
  namespace: howto-k8s-ingress-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: color
      version: blue
  template:
    metadata:
      labels:
        app: color
        version: blue
      annotations:
        appmesh.k8s.aws/preview: "true"
    spec:
      containers:
        - name: app
          image: 669977933099.dkr.ecr.us-west-2.amazonaws.com/howto-k8s-ingress-gateway/colorapp
          ports:
            - containerPort: 8080
          env:
            - name: "COLOR"
              value: "blue"
---
apiVersion: v1
kind: Service
metadata:
  name: color-red
  namespace: howto-k8s-ingress-gateway
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: color
    version: red
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: red
  namespace: howto-k8s-ingress-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: color
      version: red
  template:
    metadata:
      labels:
        app: color
        version: red
      annotations:
        appmesh.k8s.aws/preview: "true"
    spec:
      containers:
        - name: app
          image: 669977933099.dkr.ecr.us-west-2.amazonaws.com/howto-k8s-ingress-gateway/colorapp
          ports:
            - containerPort: 8080
          env:
            - name: "COLOR"
              value: "red"
---
apiVersion: v1
kind: Service
metadata:
  name: color-yellow
  namespace: howto-k8s-ingress-gateway
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: color
    version: yellow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: yellow
  namespace: howto-k8s-ingress-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: color
      version: yellow
  template:
    metadata:
      labels:
        app: color
        version: yellow
      annotations:
        appmesh.k8s.aws/preview: "true"
    spec:
      containers:
        - name: app
          image: 669977933099.dkr.ecr.us-west-2.amazonaws.com/howto-k8s-ingress-gateway/colorapp
          ports:
            - containerPort: 8080
          env:
            - name: "COLOR"
              value: "yellow"
---
apiVersion: v1
kind: Service
metadata:
  name: color-white
  namespace: howto-k8s-ingress-gateway
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app: color
    version: white
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: white
  namespace: howto-k8s-ingress-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: color
      version: white
  template:
    metadata:
      labels:
        app: color
        version: white
      annotations:
        appmesh.k8s.aws/preview: "true"
    spec:
      containers:
        - name: app
          image: 669977933099.dkr.ecr.us-west-2.amazonaws.com/howto-k8s-ingress-gateway/colorapp
          ports:
            - containerPort: 8080
          env:
            - name: "COLOR"
              value: "white"
---
apiVersion: v1
kind: Service
metadata:
  name: color-headers
  namespace: howto-k8s-ingress-gateway
spec:
  ports:
    - port: 8080
      name: http
---
apiVersion: v1
kind: Service
metadata:
  name: color-paths
  namespace: howto-k8s-ingress-gateway
spec:
  ports:
    - port: 8080
      name: http
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-gw
  namespace: howto-k8s-ingress-gateway
spec:
  type: LoadBalancer
  ports:
    - port: 8088
      name: http
  selector:
    app: ingress-gw
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-gw
  namespace: howto-k8s-ingress-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-gw
  template:
    metadata:
      labels:
        app: ingress-gw
      annotations:
        appmesh.k8s.aws/sidecarInjectorWebhook: "disabled"
    spec:
      containers:
        - name: envoy
          image: 840364872350.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-envoy:v1.12.3.0-prod
          ports:
            - containerPort: 9080
          env:
            - name: "APPMESH_VIRTUAL_NODE_NAME"
              value: "mesh/howto-k8s-ingress-gateway/virtualGateway/ingress-gw_howto-k8s-ingress-gateway"
            - name: "APPMESH_PREVIEW"
              value: "1"
            - name: "ENVOY_LOG_LEVEL"
              value: "info"
            - name: "AWS_REGION"
              value: "us-west-2"
